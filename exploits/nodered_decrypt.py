import sys
import json
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives import hashes, serialization
import base64

def decrypt_creds(key, cipher_data):
    flows = cipher_data["$"]
    init_vector = bytes.fromhex(flows[:32])
    flows_base64 = flows[32:]
    backend = default_backend()
    cipher = Cipher(algorithms.AES(key), modes.CTR(init_vector), backend=backend)
    decryptor = cipher.decryptor()
    decrypted = decryptor.update(base64.b64decode(flows_base64)) + decryptor.finalize()
    return json.loads(decrypted.decode('utf-8'))

if __name__ == "__main__":
    if len(sys.argv) != 3:
        print("Usage: python3 nodered_decrypt.py flows_cred.json .config.runtime.json")
        sys.exit(1)
    
    flows_cred_file = sys.argv[1]
    secret_file = sys.argv[2]
    
    with open(flows_cred_file, 'r') as f:
        flows_cred = json.load(f)
    
    with open(secret_file, 'r') as f:
        secret_json = json.load(f)
    
    secret = secret_json["_credentialSecret"]
    
    digest = hashes.Hash(hashes.SHA256(), backend=default_backend())
    digest.update(secret.encode())
    key = digest.finalize()
    
    print(decrypt_creds(key, flows_cred))
