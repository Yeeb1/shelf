import socket
import argparse
from urllib.parse import urlparse

def send_raw_http_request(url, headers, char, print_success=False):
    parsed_url = urlparse(url)
    host = parsed_url.hostname
    path = parsed_url.path if parsed_url.path else '/'
    port = parsed_url.port if parsed_url.port else (443 if parsed_url.scheme == 'https' else 80)
    full_path = f"{path}{char}"

    request_line = f"GET {full_path} HTTP/1.1\r\n"
    header_lines = "\r\n".join([f"{k}: {v}" for k, v in headers.items()])
    additional_headers = "Connection: close\r\n"
    raw_request = (request_line + f"Host: {host}\r\n" + header_lines + "\r\n" + additional_headers + "\r\n").encode('utf-8', 'replace')

    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        s.connect((host, port))
        s.sendall(raw_request)
        response = b""
        while True:
            part = s.recv(4096)
            if not part:
                break
            response += part

    response_decoded = response.decode('utf-8', 'ignore')
    status_line = response_decoded.split('\r\n')[0]
    status_code = status_line.split(' ')[1] if len(status_line.split(' ')) > 1 else "Unknown Status Code"

    if print_success and status_code != "403":
        filename = f"response_{repr(char)}.html"
        with open(filename, "w", encoding='utf-8') as file:
            file.write(response_decoded)
        print(f"Character {repr(char)}: {status_code}. Response saved to {filename}")
    else:
        print(f"Character {repr(char)}: {status_code}")

def main():
    parser = argparse.ArgumentParser(description="Send Raw HTTP Requests Including Non-printable Characters")
    parser.add_argument("url", help="The URL to send the request to")
    parser.add_argument("--header", help="Optional custom headers to include in requests", action='append', default=[])
    parser.add_argument("--success", help="Save the response to a file if it's not 403 Forbidden", action="store_true")

    args = parser.parse_args()

    headers = {}
    if args.header:
        for header in args.header:
            key, value = header.split(':', 1)
            headers[key.strip()] = value.strip()

    test_chars = ["\x85", "\xA0", "\x1F", "\x1E", "\x1D", "\x1C", "\x0C", "\x0B", "\x09"]
    for char in test_chars:
        send_raw_http_request(args.url, headers, char, args.success)

if __name__ == "__main__":
    main()
