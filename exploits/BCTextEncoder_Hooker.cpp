#include "pch.h"

#include <windows.h>
#include <fstream>
#include <MinHook.h>

typedef int (WINAPI* WideCharToMultiByte_t)(UINT, DWORD, LPCWCH, int, LPSTR, int, LPCCH, LPBOOL);
WideCharToMultiByte_t fpWideCharToMultiByte = nullptr;

void WriteLog(const wchar_t* message) {
    std::wofstream logFile;
    logFile.open("C:\\Windows\\Tasks\\hooker.log", std::ios::out | std::ios::app);
    if (logFile.is_open()) {
        logFile << message << std::endl;
        logFile.close();
    }
}

int WINAPI HookedWideCharToMultiByte(UINT CodePage, DWORD dwFlags, LPCWCH lpWideCharStr,
    int cchWideChar, LPSTR lpMultiByteStr, int cbMultiByte,
    LPCCH lpDefaultChar, LPBOOL lpUsedDefaultChar) {
    WriteLog(L"HookedWideCharToMultiByte called.");
    WriteLog(lpWideCharStr);
    return fpWideCharToMultiByte(CodePage, dwFlags, lpWideCharStr, cchWideChar,
        lpMultiByteStr, cbMultiByte, lpDefaultChar, lpUsedDefaultChar);
}

BOOL APIENTRY DllMain(HMODULE hModule, DWORD ul_reason_for_call, LPVOID lpReserved) {
    switch (ul_reason_for_call) {
    case DLL_PROCESS_ATTACH:
        WriteLog(L"DLL_PROCESS_ATTACH: DLL injected and attached to a process.");
        MH_Initialize();
        MH_CreateHook(&WideCharToMultiByte, &HookedWideCharToMultiByte,
            reinterpret_cast<LPVOID*>(&fpWideCharToMultiByte));
        MH_EnableHook(&WideCharToMultiByte);
        WriteLog(L"Hook for WideCharToMultiByte set.");
        break;
    case DLL_PROCESS_DETACH:
        WriteLog(L"DLL_PROCESS_DETACH: DLL detached and unloaded from a process.");
        MH_DisableHook(&WideCharToMultiByte);
        MH_Uninitialize();
        break;
    }
    return TRUE;
}
